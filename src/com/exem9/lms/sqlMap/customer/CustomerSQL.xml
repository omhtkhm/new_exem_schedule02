<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN"
    "http://www.ibatis.com/dtd/sql-map-2.dtd">

<sqlMap namespace="customer">
	<typeAlias alias="customerBean" 
			   type="com.exem9.lms.web.customer.bean.CustomerBean"/> 
	<typeAlias alias="supoBean" 
			   type="com.exem9.lms.web.common.bean.SupoBean" />
	<typeAlias alias="customermemberBean" 
			   type="com.exem9.lms.web.customer.bean.CustomerMemberBean"/>  
	<typeAlias alias="customerNmBean" 
			   type="com.exem9.lms.web.customer.bean.CustomerNmBean"/>
	<typeAlias alias="customerPjtNmBean" 
			   type="com.exem9.lms.web.customer.bean.CustomerPjtNmBean"/>			   
	
    <resultMap class="customerBean" id="cusInfoMap">
		<result property="cusId" column="customer_id"/>
		<result property="cusNm" column="customer_name"/>
		<result property="proId" column="project_id"/>
		<result property="proNm" column="project_name"/>
		<result property="cususerId" column="cususer_id"/>
		<result property="cususerNm" column="cususer_name"/>
		<result property="cususerPhone" column="cususer_phone"/>
		<result property="cususerMail" column="cususer_mail"/>
		<result property="cusLoca" column="customer_location"/>
		<result property="salseId" column="salesman_id"/>		
		<result property="etc" column="etc"/>
		<result property="createUserId" column="create_user"/>
		<result property="createDate" column="create_date"/>
		<result property="lastUpUserId" column="last_update_user"/>
		<result property="lastUpDate" column="last_update_date"/>
		<result property="dbmsId" column="dbms_id"/>
	</resultMap> 
	
	<!-- 사용하지 않음 -->
	<select id="getcusinfo" parameterClass="java.util.HashMap" resultMap="cusInfoMap">
	  select customer_id, customer_name,          
			project_id, project_name, customer_location, etc, 
			dbms_id, 
			cususer_id, cususer_name, cususer_phone, cususer_mail,
			salesman_id,													
			create_user, create_date, last_update_user, last_update_date
	  from    
	  	(   
		    select 
		    	xc.customer_id,          xc.customer_name,          
				xp.project_id,          xp.project_name,              xp.customer_location, xp.etc, 
				xpd.dbms_id, 
				xcm.cususer_id, xcm.cususer_name, xcm.cususer_phone, xcm.cususer_mail,
				xpd.salesman_id,													
				xp.create_user, xp.create_date, xp.last_update_user,          xp.last_update_date,
				ROW_NUMBER() OVER (ORDER BY xc.customer_name asc, xp.project_name asc) as row_num
			from xm_customer xc 
				left outer join xm_project xp  on xc.customer_id = xp.customer_id   
				left outer join xm_project_dbms xpd on xc.customer_id = xpd.customer_id and xp.project_id = xpd.project_id
				left outer join xm_project_dbms_cusmember xpdc on xc.customer_id = xpdc.customer_id and xp.project_id = xpdc.project_id and xpd.dbms_id = xpdc.dbms_id
				left outer join xm_customer_member xcm on xpdc.cususer_id = xcm.cususer_id
			where 1 = 1
				
			<isNotEmpty property="selectTextVal">
				 <!-- 검색조건이 전체-->
				<isEqual property="selectBtnVal" compareValue="0">
					and 
					(
						xc.customer_name like '%' || #selectTextVal# || '%' or
						xp.project_name like '%' || #selectTextVal# || '%' or
						xcm.cususer_name like '%' || #selectTextVal# || '%' or
						xpd.salesman_id in (select user_id from xm_member where user_name like '%' || #selectTextVal# || '%')
					)
				</isEqual>
				<!-- 검색조건이 고객사명 -->
				<isEqual property="selectBtnVal" compareValue="1"> 
					and xc.customer_name like '%' || #selectTextVal# || '%'
				</isEqual>
				<!-- 검색조건이 프로젝트명 -->
				<isEqual property="selectBtnVal" compareValue="2"> 
					and xp.project_name like '%' || #selectTextVal# || '%'
				</isEqual>
				<!-- 검색조건이 고객명 -->
				<isEqual property="selectBtnVal" compareValue="3"> 
					and xcm.cususer_name like '%' || #selectTextVal# || '%'
				</isEqual>
				 <!-- 검색조건이 영업대표명-->
				<isEqual property="selectBtnVal" compareValue="4">
					and xpd.salesman_id in (select user_id from xm_member where user_name like '%' || #selectTextVal# || '%')
				</isEqual>
			</isNotEmpty>
			
			order by xc.customer_name, xp.project_name													
		) u
		where 1 = 1
		<isNotEmpty property="pageNo">
		and u.row_num BETWEEN #startNo# AND #endNo# 
		</isNotEmpty>
		<isEmpty property="pageNo">
		and u.row_num BETWEEN 1 AND #viewCount#
		</isEmpty> 
		<!-- order by u.customer_name, u.project_name asc -->
	
	</select> 

	<!-- 사용하지 않음 -->
	<select id="getNCount" parameterClass="java.util.HashMap" resultClass="Integer">
		select count(customer_id) from    
	  	(   
		    select 
		    	xc.customer_id,          xc.customer_name,          
				xp.project_id,          xp.project_name,              xp.customer_location, xp.etc, 
				xpd.dbms_id, 
				xcm.cususer_id, xcm.cususer_name, xcm.cususer_phone, xcm.cususer_mail,
				xpd.salesman_id,													
				xp.create_user, xp.create_date, xp.last_update_user,          xp.last_update_date
			from xm_customer xc 
				left outer join xm_project xp  on xc.customer_id = xp.customer_id   
				left outer join xm_project_dbms xpd on xc.customer_id = xpd.customer_id and xp.project_id = xpd.project_id
				left outer join xm_project_dbms_cusmember xpdc on xc.customer_id = xpdc.customer_id and xp.project_id = xpdc.project_id and xpd.dbms_id = xpdc.dbms_id
				left outer join xm_customer_member xcm on xpdc.cususer_id = xcm.cususer_id
			where 1 = 1
				
			<isNotEmpty property="selectTextVal">
				 <!-- 검색조건이 전체-->
				<isEqual property="selectBtnVal" compareValue="0">
					and 
					( 
						xc.customer_name like '%' || #selectTextVal# || '%' or
						xp.project_name like '%' || #selectTextVal# || '%' or
						xcm.cususer_name like '%' || #selectTextVal# || '%' or
						xpd.salesman_id in (select user_id from xm_member where user_name like '%' || #selectTextVal# || '%')
					)
				</isEqual>
				<!-- 검색조건이 고객사명 -->
				<isEqual property="selectBtnVal" compareValue="1"> 
					and xc.customer_name like '%' || #selectTextVal# || '%'
				</isEqual>
				<!-- 검색조건이 프로젝트명 -->
				<isEqual property="selectBtnVal" compareValue="2"> 
					and xp.project_name like '%' || #selectTextVal# || '%'
				</isEqual>
				<!-- 검색조건이 고객명 -->
				<isEqual property="selectBtnVal" compareValue="3"> 
					and xcm.cususer_name like '%' || #selectTextVal# || '%'
				</isEqual>
				 <!-- 검색조건이 영업대표명-->
				<isEqual property="selectBtnVal" compareValue="4">
					and xpd.salesman_id in (select user_id from xm_member where user_name like '%' || #selectTextVal# || '%')
				</isEqual>
			</isNotEmpty>
		) u
	</select>
	
	<!-- 이것을 사용함 -->
	<select id="getcusinfo3" parameterClass="java.util.HashMap" resultMap="cusInfoMap">
	 SELECT u.customer_id, 
       u.customer_name, 
       u.project_id, 
       u.project_name, 
       u.customer_location, 
       u.etc, 
       u.dbms_id, 
       u.cususer_id, 
       u.cususer_name, 
       u.cususer_phone, 
       u.cususer_mail, 
       u.salesman_id, 
       u.create_user, 
       u.create_date, 
       u.last_update_user, 
       u.last_update_date 
	FROM   
		   (
			SELECT customer_id, 
		               customer_name, 
		               project_id, 
		               project_name, 
		               customer_location, 
		               etc, 
		               dbms_id, 
		               cususer_id,
					   cususer_name, 
		               cususer_phone, 
		               cususer_mail,								
		               salesman_id, 
		               create_user, 
		               create_date, 
		               last_update_user, 
		               last_update_date, 
		               Row_number()  over (ORDER BY customer_name ASC, project_name ASC) AS row_num 
		        FROM   (
																							
					    SELECT u.customer_id, 
		                       xc.customer_name, 
		                       u.project_id, 
		                       xp.project_name, 
		                       xp.customer_location, 
		                       xp.etc, 
		                       u.dbms_id, 
		                       u.cususer_id, 
		                       xcm.cususer_name, 
		                       xcm.cususer_phone, 
		                       xcm.cususer_mail, 
		                       xpd.salesman_id, 
		                       xp.create_user, 
		                       xp.create_date, 
		                       xp.last_update_user, 
		                       xp.last_update_date 
		                FROM  (
								SELECT xc.customer_id, 
		               			xp.project_id, 
		               			xpd.dbms_id, 
		               			Min(xpdc.cususer_id) AS cususer_id
								FROM   xm_customer xc 
		                       	left outer join xm_project xp 
		                                    ON xc.customer_id = xp.customer_id 
		                       	left outer join xm_project_dbms xpd 
		                                    ON xc.customer_id = xpd.customer_id 
		                                       AND xp.project_id = xpd.project_id 
		                       	left outer join xm_project_dbms_cusmember xpdc 
		                                    ON xc.customer_id = xpdc.customer_id 
		                                       AND xp.project_id = xpdc.project_id 
		                                       AND xpd.dbms_id = xpdc.dbms_id 
		                       	left outer join xm_customer_member xcm 
		                                    ON xpdc.cususer_id = xcm.cususer_id 
								group by xc.customer_id, xp.project_id, xpd.dbms_id
		     				) u 
						
		                        left outer join xm_customer xc on xc.customer_id = u.customer_id
								left outer join xm_project xp ON xp.project_id = u.project_id 
		                        left outer join xm_project_dbms xpd ON xpd.customer_id = u.customer_id 
		                                       						AND xpd.project_id = u.project_id 
																	and xpd.dbms_id = u.dbms_id 	
		                        left outer join xm_customer_member xcm ON u.cususer_id = xcm.cususer_id 
						WHERE  1 = 1 
						
					<isNotEmpty property="selectTextVal">
						 <!-- 검색조건이 전체-->
						<isEqual property="selectBtnVal" compareValue="0">
							and 
							(
								xc.customer_name like '%' || #selectTextVal# || '%' or
								xp.project_name like '%' || #selectTextVal# || '%' or
								xcm.cususer_name like '%' || #selectTextVal# || '%' or
								xpd.salesman_id in (select user_id from xm_member where user_name like '%' || #selectTextVal# || '%') or
								xpd.dbms_id in ( select dbms_id from xm_dbms where dbms_name like '%' || #selectTextVal# || '%' ) or
								(
									( u.customer_id , u.project_id , u.dbms_id ) in
									( 
										select  customer_id , project_id , dbms_id  
										from xm_project_dbms_cusmember 
	      								where cususer_id IN 
	      								(
	      									SELECT cususer_id  FROM   xm_customer_member 
	                                    	WHERE  cususer_name LIKE '%' || #selectTextVal# || '%'
	                                    )	 
	                                 )
                                 )
							)
						</isEqual>
						<!-- 검색조건이 고객사명 -->
						<isEqual property="selectBtnVal" compareValue="1"> 
							and xc.customer_name like '%' || #selectTextVal# || '%'
						</isEqual>
						<!-- 검색조건이 프로젝트명 -->
						<isEqual property="selectBtnVal" compareValue="2"> 
							and xp.project_name like '%' || #selectTextVal# || '%'
						</isEqual>
						<!-- 검색조건이 제품(업무)명 -->
						<isEqual property="selectBtnVal" compareValue="3"> 
							and xpd.dbms_id in ( select dbms_id from xm_dbms where dbms_name like '%' || #selectTextVal# || '%' )
						</isEqual>
						<!-- 검색조건이 고객명 -->
						<isEqual property="selectBtnVal" compareValue="4"> 
							and ( u.customer_id , u.project_id , u.dbms_id ) in
								( 
									select  customer_id , project_id , dbms_id  
									from xm_project_dbms_cusmember 
      								where cususer_id IN 
      								(
      									SELECT cususer_id  FROM   xm_customer_member 
                                    	WHERE  cususer_name LIKE '%' || #selectTextVal# || '%'
                                    )	 
                                 )
						</isEqual>
						 <!-- 검색조건이 영업대표명-->
						<isEqual property="selectBtnVal" compareValue="5">
							and xpd.salesman_id in (select user_id from xm_member where user_name like '%' || #selectTextVal# || '%')
						</isEqual>
					</isNotEmpty>
					
		                ORDER  BY xc.customer_name, xp.project_name
				) u 
			) u
				WHERE  1 = 1 
		      <isNotEmpty property="pageNo">
				and u.row_num BETWEEN #startNo# AND #endNo# 
			  </isNotEmpty>
			  <isEmpty property="pageNo">
				and u.row_num BETWEEN 1 AND #viewCount#
			  </isEmpty> 
	
	</select>
	
	<select id="getNCount3" parameterClass="java.util.HashMap" resultClass="Integer">

			SELECT count(customer_id) 
		                
		        FROM   (
																							
					    SELECT u.customer_id, 
		                       xc.customer_name, 
		                       u.project_id, 
		                       xp.project_name, 
		                       xp.customer_location, 
		                       xp.etc, 
		                       u.dbms_id, 
		                       u.cususer_id, 
		                       xcm.cususer_name, 
		                       xcm.cususer_phone, 
		                       xcm.cususer_mail, 
		                       xpd.salesman_id, 
		                       xp.create_user, 
		                       xp.create_date, 
		                       xp.last_update_user, 
		                       xp.last_update_date 
		                FROM  (
								SELECT xc.customer_id, 
		               			xp.project_id, 
		               			xpd.dbms_id, 
		               			Min(xpdc.cususer_id) AS cususer_id
								FROM   xm_customer xc 
		                       	left outer join xm_project xp 
		                                    ON xc.customer_id = xp.customer_id 
		                       	left outer join xm_project_dbms xpd 
		                                    ON xc.customer_id = xpd.customer_id 
		                                       AND xp.project_id = xpd.project_id 
		                       	left outer join xm_project_dbms_cusmember xpdc 
		                                    ON xc.customer_id = xpdc.customer_id 
		                                       AND xp.project_id = xpdc.project_id 
		                                       AND xpd.dbms_id = xpdc.dbms_id 
		                       	left outer join xm_customer_member xcm 
		                                    ON xpdc.cususer_id = xcm.cususer_id 
								group by xc.customer_id, xp.project_id, xpd.dbms_id
		     				) u 
						
		                        left outer join xm_customer xc on xc.customer_id = u.customer_id
								left outer join xm_project xp ON xp.project_id = u.project_id 
		                        left outer join xm_project_dbms xpd ON xpd.customer_id = u.customer_id 
		                                       						AND xpd.project_id = u.project_id 
																	and xpd.dbms_id = u.dbms_id 	
		                        left outer join xm_customer_member xcm ON u.cususer_id = xcm.cususer_id 
						
						WHERE  1 = 1 
						
					<isNotEmpty property="selectTextVal">
						 <!-- 검색조건이 전체-->
						<isEqual property="selectBtnVal" compareValue="0">
							and 
							(
								xc.customer_name like '%' || #selectTextVal# || '%' or
								xp.project_name like '%' || #selectTextVal# || '%' or
								xcm.cususer_name like '%' || #selectTextVal# || '%' or
								xpd.salesman_id in (select user_id from xm_member where user_name like '%' || #selectTextVal# || '%') or
								xpd.dbms_id in ( select dbms_id from xm_dbms where dbms_name like '%' || #selectTextVal# || '%' ) or
								(
									( u.customer_id , u.project_id , u.dbms_id ) in
									( 
										select  customer_id , project_id , dbms_id  
										from xm_project_dbms_cusmember 
	      								where cususer_id IN 
	      								(
	      									SELECT cususer_id  FROM   xm_customer_member 
	                                    	WHERE  cususer_name LIKE '%' || #selectTextVal# || '%'
	                                    )	 
	                                 )
                                 )
							)
						</isEqual>
						<!-- 검색조건이 고객사명 -->
						<isEqual property="selectBtnVal" compareValue="1"> 
							and xc.customer_name like '%' || #selectTextVal# || '%'
						</isEqual>
						<!-- 검색조건이 프로젝트명 -->
						<isEqual property="selectBtnVal" compareValue="2"> 
							and xp.project_name like '%' || #selectTextVal# || '%'
						</isEqual>
						<!-- 검색조건이 제품(업무)명 -->
						<isEqual property="selectBtnVal" compareValue="3"> 
							and xpd.dbms_id in ( select dbms_id from xm_dbms where dbms_name like '%' || #selectTextVal# || '%' )
						</isEqual>
						<!-- 검색조건이 고객명 -->
						<isEqual property="selectBtnVal" compareValue="4"> 
							and ( u.customer_id , u.project_id , u.dbms_id ) in
								( 
									select  customer_id , project_id , dbms_id  
									from xm_project_dbms_cusmember 
      								where cususer_id IN 
      								(
      									SELECT cususer_id  FROM   xm_customer_member 
                                    	WHERE  cususer_name LIKE '%' || #selectTextVal# || '%'
                                    )	 
                                 )
						</isEqual>
						 <!-- 검색조건이 영업대표명-->
						<isEqual property="selectBtnVal" compareValue="4">
							and xpd.salesman_id in (select user_id from xm_member where user_name like '%' || #selectTextVal# || '%')
						</isEqual>
					</isNotEmpty>
					
		                ORDER  BY xc.customer_name, xp.project_name
				) u 
	</select>
	
	<!-- 이것도 사용하지 않는 듯 -->
	<select id="getcusinfo2" parameterClass="java.util.HashMap" resultMap="cusInfoMap">
	  select u.customer_id, u.customer_name,          
			u.project_id, u.project_name, u.customer_location, u.etc, 
			u.dbms_id, 
			xcm.cususer_id, xcm.cususer_name, xcm.cususer_phone, xcm.cususer_mail,
			u.salesman_id,													
			u.create_user, u.create_date, u.last_update_user, u.last_update_date
	  from    
	  	<!-- 고객담당자 대표값(담당자ID최소값)만 가져오기 -->
	  (	
	  	select 	
	  		customer_id,          customer_name,          
			project_id,          project_name,              customer_location, etc, 
			dbms_id, 
			min(cususer_id) as cususer_id,
			salesman_id,													
			create_user, create_date, last_update_user,   last_update_date,
			ROW_NUMBER() OVER (ORDER BY customer_name asc, project_name asc) as row_num
				from				
	  			<!-- 전체 고객/프로젝트/고객담당자 가져오기 -->
			  	(   
				    select 
				    	xc.customer_id,          xc.customer_name,          
						xp.project_id,          xp.project_name,              xp.customer_location, xp.etc, 
						xpd.dbms_id, 
						xcm.cususer_id, xcm.cususer_name, xcm.cususer_phone, xcm.cususer_mail,
						xpd.salesman_id,													
						xp.create_user, xp.create_date, xp.last_update_user,          xp.last_update_date
					from xm_customer xc 
						left outer join xm_project xp  on xc.customer_id = xp.customer_id   
						left outer join xm_project_dbms xpd on xc.customer_id = xpd.customer_id and xp.project_id = xpd.project_id
						left outer join xm_project_dbms_cusmember xpdc on xc.customer_id = xpdc.customer_id and xp.project_id = xpdc.project_id and xpd.dbms_id = xpdc.dbms_id
						left outer join xm_customer_member xcm on xpdc.cususer_id = xcm.cususer_id
					where 1 = 1
						
					<isNotEmpty property="selectTextVal">
						 <!-- 검색조건이 전체-->
						<isEqual property="selectBtnVal" compareValue="0">
							and 
							(
								xc.customer_name like '%' || #selectTextVal# || '%' or
								xp.project_name like '%' || #selectTextVal# || '%' or
								xcm.cususer_name like '%' || #selectTextVal# || '%' or
								xpd.salesman_id in (select user_id from xm_member where user_name like '%' || #selectTextVal# || '%')
							)
						</isEqual>
						<!-- 검색조건이 고객사명 -->
						<isEqual property="selectBtnVal" compareValue="1"> 
							and xc.customer_name like '%' || #selectTextVal# || '%'
						</isEqual>
						<!-- 검색조건이 프로젝트명 -->
						<isEqual property="selectBtnVal" compareValue="2"> 
							and xp.project_name like '%' || #selectTextVal# || '%'
						</isEqual>
						<!-- 검색조건이 고객명 -->
						<isEqual property="selectBtnVal" compareValue="3"> 
							and xcm.cususer_name like '%' || #selectTextVal# || '%'
						</isEqual>
						 <!-- 검색조건이 영업대표명-->
						<isEqual property="selectBtnVal" compareValue="4">
							and xpd.salesman_id in (select user_id from xm_member where user_name like '%' || #selectTextVal# || '%')
						</isEqual>
					</isNotEmpty>
					
					order by xc.customer_name, xp.project_name													
				) u
				<!-- 전체 고객담당자 가져오기 끝 -->
			group by 
				        customer_id,          customer_name,          
						project_id,          project_name,              customer_location, etc, 
						dbms_id, 
						cususer_id,
						salesman_id,													
						create_user, create_date, last_update_user, last_update_date	
		) u
		<!-- 고객담당자 대표값(고객담당자 번호의 최소값)만 가져오기 끝 -->
		left outer join xm_customer_member xcm on u.cususer_id = xcm.cususer_id
		
		where 1 = 1
		<isNotEmpty property="pageNo">
		and u.row_num BETWEEN #startNo# AND #endNo# 
		</isNotEmpty>
		<isEmpty property="pageNo">
		and u.row_num BETWEEN 1 AND #viewCount#
		</isEmpty> 
		<!-- order by u.customer_name, u.project_name asc -->
	
	</select> 


	<!-- 이것도 사용하지 않는 듯 -->	
	<select id="getNCount2" parameterClass="java.util.HashMap" resultClass="Integer">
		select count(u.customer_id)          
	  from    
	  	<!-- 고객담당자 대표값(담당자ID최소값)만 가져오기 -->
	  (	
	  	select 	
	  		customer_id,          customer_name,          
			project_id,          project_name,              customer_location, etc, 
			dbms_id, 
			min(cususer_id) as cususer_id,
			salesman_id,													
			create_user, create_date, last_update_user,   last_update_date,
			ROW_NUMBER() OVER (ORDER BY customer_name asc, project_name asc) as row_num
				from				
	  			<!-- 전체 고객/프로젝트/고객담당자 가져오기 -->
			  	(   
				    select 
				    	xc.customer_id,          xc.customer_name,          
						xp.project_id,          xp.project_name,              xp.customer_location, xp.etc, 
						xpd.dbms_id, 
						xcm.cususer_id, xcm.cususer_name, xcm.cususer_phone, xcm.cususer_mail,
						xpd.salesman_id,													
						xp.create_user, xp.create_date, xp.last_update_user,          xp.last_update_date
					from xm_customer xc 
						left outer join xm_project xp  on xc.customer_id = xp.customer_id   
						left outer join xm_project_dbms xpd on xc.customer_id = xpd.customer_id and xp.project_id = xpd.project_id
						left outer join xm_project_dbms_cusmember xpdc on xc.customer_id = xpdc.customer_id and xp.project_id = xpdc.project_id and xpd.dbms_id = xpdc.dbms_id
						left outer join xm_customer_member xcm on xpdc.cususer_id = xcm.cususer_id
					where 1 = 1
						
					<isNotEmpty property="selectTextVal">
						 <!-- 검색조건이 전체-->
						<isEqual property="selectBtnVal" compareValue="0">
							and 
							(
								xc.customer_name like '%' || #selectTextVal# || '%' or
								xp.project_name like '%' || #selectTextVal# || '%' or
								xcm.cususer_name like '%' || #selectTextVal# || '%' or
								xpd.salesman_id in (select user_id from xm_member where user_name like '%' || #selectTextVal# || '%')
							)
						</isEqual>
						<!-- 검색조건이 고객사명 -->
						<isEqual property="selectBtnVal" compareValue="1"> 
							and xc.customer_name like '%' || #selectTextVal# || '%'
						</isEqual>
						<!-- 검색조건이 프로젝트명 -->
						<isEqual property="selectBtnVal" compareValue="2"> 
							and xp.project_name like '%' || #selectTextVal# || '%'
						</isEqual>
						<!-- 검색조건이 고객명 -->
						<isEqual property="selectBtnVal" compareValue="3"> 
							and xcm.cususer_name like '%' || #selectTextVal# || '%'
						</isEqual>
						 <!-- 검색조건이 영업대표명-->
						<isEqual property="selectBtnVal" compareValue="4">
							and xpd.salesman_id in (select user_id from xm_member where user_name like '%' || #selectTextVal# || '%')
						</isEqual>
					</isNotEmpty>
					
					order by xc.customer_name, xp.project_name													
				) u
				<!-- 전체 고객담당자 가져오기 끝 -->
			group by 
				        customer_id,          customer_name,          
						project_id,          project_name,              customer_location, etc, 
						dbms_id, 
						cususer_id,
						salesman_id,													
						create_user, create_date, last_update_user, last_update_date	
		) u
	</select>
	
	<!-- 고객사명 Update -->
	<update id="updateCusInfo" parameterClass="java.util.HashMap">
	UPDATE XM_CUSTOMER 
		SET customer_name = #cusNm#,
			LAST_UPDATE_USER = #userId#,
	    	LAST_UPDATE_DATE = current_date::date
	WHERE CUSTOMER_ID = #cusId#
	</update>
	
	<!-- 프로젝트, 고객사위치, 비고 Update -->
	<update id="updatePjtInfo" parameterClass="java.util.HashMap">
	UPDATE XM_PROJECT 
		SET project_name = #pjtNm#,
			customer_location = #cuslocation#, 
			etc=#etc#,
			LAST_UPDATE_USER = #userId#,
	    	LAST_UPDATE_DATE = current_date::date
	WHERE CUSTOMER_ID = #cusId# and project_id=#pjtId#
	</update>
	
	<!-- 제품, 담당영업 Update -->
	<update id="updateDbmsInfo" parameterClass="java.util.HashMap">
	UPDATE XM_PROJECT_DBMS 
		SET 
			salesman_id = #salesmanId#,
			dbms_id = #newDbmsId#
	WHERE CUSTOMER_ID = #cusId# and project_id=#pjtId# and dbms_id = #dbmsId#
	</update>
	
	<!-- 고객담당자 전화 email Update -->
	<update id="updateCusmemberInfo" parameterClass="java.util.HashMap">
	UPDATE XM_customer_member 
		SET 
			cususer_phone = #phone#,
			cususer_mail = #email#
	WHERE cususer_ID = #cusmemberId#
	</update>
	
	<select id="getcusNminfo" resultClass="customerBean">
	SELECT distinct  customer_name as cusNm	  
	from xm_customer	
	group by customer_id, customer_name
	order by customer_name asc
	</select>
	
	<select id="getProinfo" parameterClass="java.util.HashMap" resultClass="customerBean">
	select xp.project_id as proId,
	       xp.project_name as proNm,
	       xc.customer_id as cusId,
	       xc.customer_location as cusLoca
	from xm_customer xc inner join xm_project xp
	on xc.customer_id = xp.customer_id	
	where 1=1
	<isNotEmpty property="cusNm"> 
		and xc.customer_name  = #cusNm#
	</isNotEmpty>
	<isNotEmpty property="cusId">	
		and xc.customer_id  = #cusId#
	</isNotEmpty>
	</select>
	
	<select id="getcusNmProinfo" parameterClass="java.util.HashMap" resultClass="customerBean">
	select xp.project_id as proId,
       xp.project_name as proNm,
       xc.customer_id as cusId,
       xc.customer_location as cusLoca,
       pd.salesman_id as salseId   
	from xm_customer xc inner join xm_project xp
	on xc.customer_id = xp.customer_id
	
	inner join xm_project_dbms pd
	on xc.customer_id = pd.customer_id
	and xp.project_id = pd.project_id
	
	where xc.customer_name  = #cusNm#
	<isNotEmpty property="cusProNm">
	and xp.project_name = #cusProNm#
	</isNotEmpty>
	<!-- group by project_id, project_name, customer_id -->
	order by xp.project_name asc
	</select>
	
	<select id="getcusNmUserinfo" parameterClass="java.util.HashMap" resultClass="customermemberBean">
	select distinct xcm.cususer_id as cususerId,
		   xcm.cususer_name as cususerNm	       
	from xm_customer_member xcm, xm_customer xc
	where xcm.customer_id = xc.customer_id
	and xc.customer_name =  #cusNm#
	</select>
	
	<select id="getcusUserinfo" parameterClass="java.util.HashMap" resultClass="customermemberBean">
	select xp.customer_id as cusId,
	       xpdm.project_id as proId,
	       xpdm.dbms_id as dbmsId,
	       xcm.cususer_id as cususerId, 
	       xcm.cususer_name as cususerNm,
	       xcm.cususer_phone as cususerPhone,
	       xcm.cususer_mail as cususerMail
	from xm_project_dbms_member_managed xpdm inner join xm_project xp
	on xpdm.project_id = xp.project_id
	inner join xm_customer_member xcm
	on xpdm.cususer_id = xcm.cususer_id
	where 1 = 1
	<isNotEmpty property="cusUser">
	and xcm..cususer_name = #cusUser#
	</isNotEmpty>
	<isNotEmpty property="cusId">
	and xp.customer_id = #cusId#
	</isNotEmpty>
	<isNotEmpty property="cusUserId">
	and xcm.cususer_id = #cusUserId#
	</isNotEmpty>		
	</select>	
	
	
	<select id="getprodbmsManagedinfo" parameterClass="java.util.HashMap" resultClass="customermemberBean">
	select a.cususer_id as cususerId,
	       xcm.cususer_name as cususerNm,
	       xcm.cususer_phone as cususerPhone,
	       xcm.cususer_mail as  cususerMail
	from (select a.customer_id,
		       a.project_id,
		       xpdm.dbms_id,
		       xpdm.cususer_id	        
		from (select xp.project_id,
			     xp.customer_id
		from xm_customer xc join xm_project xp
		on xc.customer_id = xp.customer_id
		<isNotEmpty property="cusNm">
		where xc.customer_name = #cusNm#
		</isNotEmpty>
		) a join xm_project_dbms_cusmember xpdm
		on a.project_id = xpdm.project_id ) a join xm_customer_member xcm 
	on a.cususer_id = xcm.cususer_id	
	group by a.cususer_id, xcm.cususer_name, xcm.cususer_phone, xcm.cususer_mail  
	</select>
		

	<resultMap class="customerNmBean" id="cusInfoMap2">
		<result property="cusId" column="customer_id"/>
		<result property="cusNm" column="customer_name"/>
	</resultMap>	
			
	<!-- 고객사 목록조회 용 콤보박스에서 사용 -->
	<select id="getcusNminfo2" resultMap="cusInfoMap2">
	SELECT customer_id, customer_name
	from xm_customer	
	order by customer_name asc;
	</select>
	
	<resultMap class="customerPjtNmBean" id="cusPjtInfoMap">
		<result property="cusId" column="customer_id"/>
		<result property="pjtId" column="project_id"/>
		<result property="pjtNm" column="project_name"/>
	</resultMap>
	
	<!-- 프로젝트 목록조회 용 콤보박스에서 사용 -->
	<select id="getcusPjtNminfo" resultMap="cusPjtInfoMap">
		select c.customer_id, p.project_id, p.project_name 
		from xm_customer c, xm_project p 
		where c.customer_id = p.customer_id
		order by c.customer_name, p.project_name asc
	</select>
	
	<update id="insertCusinfo1000" parameterClass="java.util.HashMap">
	 INSERT INTO XM_CUSTOMER  (customer_id, customer_name, customer_location, salesman_id, etc,
               				    create_user, create_date, last_update_user, last_update_date) 	 
	  				    VALUES(NEXTVAL('xm_customer_next_val'), #cusNm#, #cuslocation#,#salesmanId#, #etc#,	
	               			    #userId#, current_date::date, null,null)      			                 
	</update>
	
	<!-- 이것도 사용하지 않는 듯 -->
	<update id="insertCusinfo0100" parameterClass="java.util.HashMap">
	 INSERT INTO XM_PROJECT VALUES(NEXTVAL('xm_project_next_val'), 
	 										#cusproNm#,
	 										(SELECT CUSTOMER_ID FROM XM_CUSTOMER WHERE CUSTOMER_NAME = #cusNm#))		
	</update> 
	<!-- 이것도 사용하지 않는 듯 -->
	<update id="insertCusinfo0010" parameterClass="java.util.HashMap">
	INSERT INTO XM_PROJECT_DBMS_MANAGED VALUES(NEXTVAL('xm_project_dbms_next_val'),	 
											   (select project_id from xm_project where project_name = #cusproNm# and customer_id = (select customer_id from xm_customer where customer_name = #cusNm#)), 
											   #dbmsId#)				                 
	</update> 
	<!-- 이것도 사용하지 않는 듯 -->	
	<update id="insertCusinfo0001" parameterClass="java.util.HashMap">
	INSERT INTO XM_CUSTOMER_MEMBER VALUES(NEXTVAL('xm_customer_member_next_val'),#cususerNm#, #cususerPhone#, #cususerMail#)
	</update> 
	<!-- 이것도 사용하지 않는 듯 -->
	<update id="insertCusinfo0001-1" parameterClass="java.util.HashMap">
	INSERT INTO xm_project_dbms_member_managed VALUES(NEXTVAL('xm_project_dbms_member_next_val'), 
													  (select project_id from xm_project where project_name = #cusproNm# and customer_id = (select customer_id from xm_customer where customer_name = #cusNm#)),
													   #dbmsId#,
													   (select cususer_id from xm_customer_member where cususer_name = #cususerNm#))
	</update> 
	
	<select id="getCusProCheck" parameterClass="java.util.HashMap" resultClass="customerPjtNmBean">
		select p.project_id as pjtId
		from xm_customer c, xm_project p 
		where c.customer_id = p.customer_id
		and c.customer_name = #cusNm#
		and p.project_name = #proNm#
	</select>	
		
	<select id="getprodbmsManagedcheck" parameterClass="java.util.HashMap" resultClass="customermemberBean">
		select a.customer_id as cusId,
		       a.project_id as proId,
		       xpdm.dbms_id as dbmsId
		from( select c.customer_id,
		             p.project_id 
			  from xm_customer c, xm_project p 
			  where c.customer_id = p.customer_id
			  and c.customer_name = #cusNm#
			  and p.project_name = #proNm#) a join xm_project_dbms_managed xpdm
		on a.project_id = xpdm.project_id
		where xpdm.dbms_id = #dbmsId#
	</select>
	
	<select id="getprodbmsmemberinfo" parameterClass="java.util.HashMap" resultClass="customermemberBean">
	select xpdc.customer_id as cusId,
	       xpdc.project_id as proId,
	       xpdc.dbms_id as dbmsId,
	       xcm.cususer_id as cususerId,
	       xcm.cususer_name as cususerNm,
	       xcm.cususer_phone as cususerPhone,
	       xcm.cususer_mail as  cususerMail
	from xm_project_dbms_cusmember xpdc, xm_customer_member xcm
	where xpdc.cususer_id = xcm.cususer_id
	and xpdc.customer_id = #cusId#
	<isNotEmpty property="proId">
	and xpdc.project_id = #proId#
	</isNotEmpty>
	<isNotEmpty property="dbmsId">
	and xpdc.dbms_id = #dbmsId#	
	</isNotEmpty>
	<isNotEmpty property="cususerNm">
	and xcm.cususer_name = #cususerNm#	
	</isNotEmpty>
	order by xpdc.cususer_id asc
	</select>
	
	<select id="getcusmemberinfo" parameterClass="java.util.HashMap" resultClass="customermemberBean">
	select xpdc.customer_id as cusId,
	       xpdc.project_id as proId,
	       xpdc.dbms_id as dbmsId,
	       xcm.cususer_id as cususerId,
	       xcm.cususer_name as cususerNm,
	       xcm.cususer_phone as cususerPhone,
	       xcm.cususer_mail as  cususerMail
	from xm_project_dbms_cusmember xpdc, xm_customer_member xcm
	where xpdc.cususer_id = xcm.cususer_id
	<isNotEmpty property="cusId">
	and xpdc.customer_id = #cusId#
	</isNotEmpty>
	order by xpdc.cususer_id asc
	</select>
	
	<!-- 모든 고객담당자정보 가져오기 -->
	<select id="getcusUserinfo2" resultClass="customermemberBean">
	select xpdc.customer_id as cusId,
	       xpdc.project_id as proId,
	       xpdc.dbms_id as dbmsId,
	       xcm.cususer_id as cususerId,
	       xcm.cususer_name as cususerNm,
	       xcm.cususer_phone as cususerPhone,
	       xcm.cususer_mail as  cususerMail
	from xm_project_dbms_cusmember xpdc, xm_customer_member xcm
	where xpdc.cususer_id = xcm.cususer_id 
	order by xcm.cususer_id asc
	</select>
	
	<!-- 고객정보 삭제 -->
	<update id="deleteCusinfo" parameterClass="java.util.HashMap">
	 DELETE from XM_customer  
	 WHERE customer_id = #cusId#  
	 </update>
	 
	 <!-- 고객사담당자 관리테이블(xm_project_dbms_cusmember 삭제 -->
	<update id="deletePjtDbmsCusmemberinfo" parameterClass="java.util.HashMap">
		 DELETE from XM_project_dbms_cusmember  
		 	WHERE customer_id = #cusId#  
		 <isNotEmpty property="pjtId">	
		 	and project_id = #pjtId#
		 </isNotEmpty>   
		 <isNotEmpty property="dbmsId">
		 	and dbms_id = #dbmsId# 
		 </isNotEmpty> 
		 <isNotEmpty property="cusmemberId">
		 	and cususer_id = #cusmemberId# 
		 </isNotEmpty>
	 </update>
	 
	 <!-- 고객사담당자 삭제 -->
	<update id="deleteCusmemberinfo" parameterClass="java.util.HashMap">
	 DELETE from XM_customer_member 
	 WHERE cususer_id = #cusmemberId#  
	 </update>
	 
	 <!-- 고객사/프로젝트 업무에 등록되어 있는 담당자 여러명 삭제 -->
	<update id="deleteCusmembersinfo" parameterClass="java.util.HashMap">
	 DELETE from XM_customer_member 
	 WHERE cususer_id in 
	 	(
		 	select cususer_id from xm_project_dbms_cusmember where customer_id = #cusId#
		 	<isNotEmpty property="pjtId"> 
		 		and project_id = #pjtId# 
		 	</isNotEmpty>	
		 	<isNotEmpty property="dbmsId">
		 		and dbms_id = #dbmsId#
		 	</isNotEmpty> 
	 	)
	 </update>
	 
	<!-- 고객사/프로젝트 업무 삭제 -->
	<update id="deleteCusPjtDbmsinfo" parameterClass="java.util.HashMap">
		 DELETE from XM_project_dbms 
		 WHERE customer_id = #cusId#
		 <isNotEmpty property="pjtId"> 
		 	and project_id = #pjtId# 
		 </isNotEmpty>
		 <isNotEmpty property="dbmsId">
		 	and dbms_id = #dbmsId#
		 </isNotEmpty>
	 </update>
	 
	 <!-- 고객사/프로젝트 삭제 -->
	<update id="deleteCusPjtinfo" parameterClass="java.util.HashMap">
		 DELETE from XM_project 
		 WHERE customer_id = #cusId#
		 <isNotEmpty property="pjtId"> 
		 	and project_id = #pjtId# 
		 </isNotEmpty>
	 </update>
	 
	 <!-- 고객사 신규 등록 -->
	 <update id="insertCus" parameterClass="java.util.HashMap">
	 INSERT INTO XM_CUSTOMER  (customer_id, customer_name, 
               				    create_user, create_date, last_update_user, last_update_date) 	 
	  				    VALUES(NEXTVAL('xm_customer_next_val'), #cusNm#,  	
	               			    #userId#, current_date::date, null,null)      			                 
	</update>
	
	<!-- 특정 고객사의 고객사id 조회 : 사용하지 않음 -->
	<select id="getCusId" parameterClass="java.util.HashMap" resultClass="Integer">
		select customer_id
		from xm_customer 
		where customer_name like '%' || #customer_name# || '%'
	</select>
	
	<!-- 등록한 고객사의 고객사id 조회 -->
	<select id="getInsertedCusId" parameterClass="java.util.HashMap" resultClass="Integer">
		select customer_id
		from xm_customer 
		where customer_name = #cusNm#
	</select>
	
	<!-- 프로젝트 신규 등록 -->
	 <update id="insertProj" parameterClass="java.util.HashMap">
	 INSERT INTO XM_PROJECT  (project_id, project_name, customer_location, etc, customer_id,
               				    create_user, create_date, last_update_user, last_update_date) 	 
	  				    VALUES(NEXTVAL('xm_project_next_val'), #cusproNm#, #cuslocation#, #etc#, #cusId#, 	
	               			    #userId#, current_date::date, null,null)      			                 
	</update>
	
	<!-- 등록한 프로젝트의 프로젝트id 조회 --> 
	<select id="getInsertedPjtId" parameterClass="java.util.HashMap" resultClass="Integer">
		select project_id
		from xm_project 
		where customer_id = #cusId# and project_name = #cusproNm# 
	</select>
	 
	<!-- 제품등록 및 담당영업 등록 -->
	 <update id="insertSalesman" parameterClass="java.util.HashMap">
	 INSERT INTO XM_PROJECT_DBMS  (customer_id, project_id, dbms_id
		 <isNotEmpty property="salesmanId"> 
		 	, salesman_id
	 	</isNotEmpty>
	 ) 	 
	    VALUES( #cusId#, #pjtId#, #newDbmsId#
	    <isNotEmpty property="salesmanId">
	     	,#salesmanId# )
	     </isNotEmpty>        			                 
	</update>
	
	<!-- 고객사 담당자 상세정보 등록 -->	
	 <insert id="insertCusmember" parameterClass="java.util.HashMap">
	 INSERT INTO XM_CUSTOMER_MEMBER  (cususer_id, cususer_name, cususer_phone, cususer_mail) 	 
	  				    VALUES(nextVal('xm_customer_member_next_val'), #cususerNm#, #cususerPhone#, #cususerMail# )
	</insert>
	
	 <!-- 고객사 담당자 상세정보 등록, 사용안함 --> 
	 <insert id="insertCusmember2" >
		<selectKey keyProperty="gencususerId" resultClass="int">
    		SELECT nextVal('xm_customer_member_next_val')
  		</selectKey>
	 INSERT INTO XM_CUSTOMER_MEMBER  (cususer_id, cususer_name, cususer_phone, cususer_mail) 	 
	  				    VALUES( #gencususerId#, #cususerNm#, #cususerPhone#, #cususerMail# )
	</insert>
	
	<!-- 고객사/프로젝트 업무별 담당자 관리테이블 등록 -->
	 <update id="insertPjtDbmsCusmember" parameterClass="java.util.HashMap">
	 INSERT INTO XM_PROJECT_DBMS_CUSMEMBER  (customer_id, project_id, dbms_id, cususer_id) 	 
	  				    VALUES( #cusId#, #pjtId#, #dbmsId#, #cusmemberId# )        			                 
	</update>
	
	<!-- 등록한 고객사담당자id 조회, max값 가져오는것으로 수정함 --> 
	<select id="getInsertedCusmemberId" parameterClass="java.util.HashMap" resultClass="Integer">
		select max(cususer_id)
		from xm_customer_member 
		<!-- 
		select cususer_id
		from xm_customer_member 
		where cususer_name = #cususerNm#
		--> 
	</select>
	
	<!-- 등록되어 있는 영업담당자 ID조회 -->
	<select id="getSalesmanId" parameterClass="java.util.HashMap" resultClass="String">
		SELECT salesman_id	  
		from xm_project_dbms	
		where customer_id = #cusId# and project_id = #pjtId# and dbms_id = #dbmsId#
	</select>
	
	<!-- 등록되어 있는 프로젝트 갯수 조회 -->
	<select id="getPjtCount" parameterClass="java.util.HashMap" resultClass="Integer">
		SELECT count(project_id)	  
		from xm_project	
		where customer_id = #cusId#
	</select>
</sqlMap>